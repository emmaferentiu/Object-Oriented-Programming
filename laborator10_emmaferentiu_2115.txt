//1.Rezolvaţi minimum 3 probleme din laboratorul de aplicaţii cu tablouri (laboratorul 8)
//folosind accesul la elementele tabloului prin pointeri.

//1. Scrieţi un program pentru determinarea valorii medii a elementelor pozitive/negative dintr-un tablou
//unidimensional. -LAB 8-REZOLVARE CU POINTERI
//Ferentiu Emma-Luciana

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#define DIM 20
int x[DIM];
float ValMed(int *x, int dim);
float ValMedPoz(int *x, int dim);
float ValMedNeg(int *x, int dim);
int main(void)
{
        int i, dim;
        
        printf("\nIntroduceti dimensiunea tabloului: ");
        scanf("%d", &dim);
        if (dim > DIM) {
                printf("\n Dimensiune prea mare !");
                _getch();
                return 0;;
        }
        printf("\n Introduceti elementele tabloului:\n");
        for (i = 0; i < dim; i++)
        {
                printf("\tx[%d] = ", i);
                scanf("%d", x+i);
        }
        printf("\n Valoarea medie este: %.2f\n", ValMed(x, dim));
        printf("Valoarea medie pozitiva este: %.2f\n", ValMedPoz(x, dim));
        printf("Valoarea medie negativa este: %.2f\n", ValMedNeg(x, dim));
        return 0;
}
// Functia determina valoarea medie a elementelor unui tablou
float ValMed(int *x, int n)
{
        int i;
        float sum = 0;
        for (i = 0; i < n; i++)
                sum += *(x+i);
        return sum / n;
}
// Functia determina valoarea medie pozitiva a elementelor din tablou
float ValMedPoz(int *x, int n) {
        int i, j = 0;
        float sum = 0;
        for (i = 0; i < n; i++) {
                if (x[i] > 0) {
                        sum += *(x+i);
                        j++;
                }
        }
        return sum / j;
}

// Functia determina valoarea medie negativa a elementelor din tablou
float ValMedNeg(int *x, int n) {
        int i, j = 0;
        float sum = 0;
        for (i = 0; i < n; i++) {
                if (x[i] < 0) {
                        sum += *(x+i);
                        j++;
                }
        }
        return sum / j;
}
//2. Scrieţi un program pentru determinarea celui mai mic element pozitiv dintr-un tablou
//unidimensional. -LAB 8-REZOLVARE CU POINTERI
//Ferentiu Emma-Luciana
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define DIM 20
int x[DIM];
int main(void)
{
        int i, dim;
        printf("\nIntroduceti dimensiunea tabloului: ");
        scanf("%d", &dim);
        printf("\n Introduceti elementele tabloului:\n");
        for (i = 0; i < dim; i++)
        {
                printf("\tx[%d] = ", i);
                scanf("%d", x+i);
        }
        int *min = x;
        for (i = 1; i < dim; i++) {
                if (*(x+i) < *min && *(x+i) >= 0) {
                        *min = *(x+i);
                }
        }
        if (*min < 0) {
                printf("Nu sunt elemente pozitive");
        }
        else
                printf("Cel mai mic element pozitiv este: %d", *min);

        return 0;
}
//3. Scrieţi o aplicatie C/C++ care citeşte de la tastatură un tablou de 10 valori intregi. Definiţi o funcţie
//care primeste tabloul ca parametru şi apoi îl afişeaza ordonat crescător. -LAB 8-REZOLVARE CU POINTERI
//Ferentiu Emma-Luciana

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int x[11];
void ordonare(int *x);
int main(void)
{
        int i;
        
        printf("\n Introduceti elementele tabloului:\n");
        for (i = 0; i < 10; i++)
        {
                printf("\tx[%d] = ", i);
                scanf("%d", x+i);
        }
        ordonare(x);
        return 0;
}
// Functia care ordoneaza crescator elementele unui sir

void ordonare(int *x) {
        int sch = 0, aux;
        do {
                sch = 0;
                for (int i = 0; i < 10; i++) {
                        if (*(x+i) > *(x+i+1)) {
                                aux = *(x + i + 1);
                                *(x + i + 1) = *(x + i);
                                *(x + i) = aux;
                                sch = 1;
                        }
                }
        } while (sch != 0);
        printf("Sirul ordonat crescator este:\n");

        for (int i = 1; i <= 10; i++) {
                printf("%d, ", *(x+i));
        }
}
//4. Scrieţi o aplicaţie C/C++ care defineşte o parolă (in format şir de caractere). Programul citeşte în
//mod repetat şirurile de caractere introduse de la tastatură, până când utilizatorul scrie parola corectă.
//Să se afişeze numărul de incercări până la introducerea parolei corecte. -LAB 8-REZOLVARE CU POINTERI
//Ferentiu Emma-Luciana
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void main()
{
        char *p, *s,parola[10], incerc[10];
        int var = 0, nr = 0;
        strcpy(parola, "abcde");
        s = incerc;
        p = parola;
        do {
                printf("Introduceti parola: ");
                scanf("%s", incerc);
                if (strcmp(p, s) == 0) {
                        var = 1;
                        printf("Parola corecta!\n");
                }
                else {
                        nr++;
                        printf("Parola gresita!!!\n");
                }
        } while (var == 0);
        printf("Numarul de incercari este:%d", nr);
        
}
//5. Scrieţi o aplicatie C/C++ care citeşte de la tastatura două siruri de caractere reprezentand numele si
//prenumele unei persoane. Afisati-le cu majuscula, separate prin două spatii de tabulare. -LAB 8-REZOLVARE CU POINTERI

//Ferentiu Emma-Luciana
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <iostream>
#define DIM 20
void main()
{
        char nume[DIM], prenume[DIM],*n,*p;
        n = nume;
        p = prenume;
        printf("Dati numele persoanei: ");
        scanf("%s", n);
        printf("Dati prenumele persoanei: ");
        scanf("%s", p);\
        *(n + 0) = toupper(*(n + 0));
        *(p + 0) = toupper(*(p + 0));
        printf("Numele si prenumele sunt : %s \t \t %s", n, p);
       
}
//9. Să se scrie o aplicaţie C/C++ în care se citesc într-un tablou unidimensional “n” valori întregi şi se
//determină numărul elementelor negative impare. Să se afişeze acest număr şi elementele respective. -LAB 8 REZOLVAT CU POINTERI
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
int x[100];
int main(void)
{
        int n, c = 0;
        printf("Dati un numar <100: ");
        scanf("%d", &n);
        for (int i = 0; i < n; i++) {
                printf("x[%d]=", i);
                scanf("%d", x + i);
                if (*(x + i) < 0) {
                        if ((-1) * *(x + i) % 2 == 1) { c++; }
                }
        }
                ("Numarul elementelor impare negative este %d iar acestea sunt: ", c);
                for (int i = 0; i < n; i++) {
                        if (*(x+i) < 0) {
                                if ((-1) * *(x+i) % 2 == 1) { printf("%d ", *(x+i)); }
                        }
                }

                return 0;
        
}

//10. Scrieţi programul care citeşte elementele întregi ale unui tablou unidimensional şi construieşte într-o
//funcţie un alt tablou unidimensional în care se vor stoca resturile împărţirii elementelor primului
//tablou la numărul elementelor pozitive din acesta. - LAB 8 REZOLVAT CU POINTERI
//Ferentiu Emma-Luciana
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
int x[100], x2[100];
void stocare(int *x, int n, int c);
void main()
{
        int n, c = 0;
        printf("Dati un numar <100: ");
        scanf("%d", &n);
        for (int i = 0; i < n; i++) {
                printf("x[%d]=", i);
                scanf("%d", x+i);
                if (x+i >= 0) { c++; }
        }
        stocare(x, n, c);// verificare
        _getch();
}

void stocare(int *x, int n, int c) {
        int x2[100];
        for (int i = 0; i < n; i++) {
                x2[i] = *(x+i) % c;
                printf("%d ", x2[i]); //verificare
        }

}
//11. Se citeşte de la tastatură un şir de caractere. Scrieţi funcţia care inversează şirul şi apoi formează un
//alt şir de caractere ce va conţine elementele de pe poziţiile pare ale şirului inversat. Afişaţi şirurile
//obţinute. - LAB 8 REZOLVAT CU POINTERI
//Ferentiu Emma-Luciana
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void functie(char *s);
void main()
{
        char *s,sir[30];
        s = sir;
        printf("Dati un sir de caractere: ");
        scanf("%s", s);
        printf("Sirul inversat este: ");
        functie(s);
}
void functie(char *s) {
        char *f, fc[30];
        f = fc;
        int j = 0;
        for (int i = strlen(s) - 1; i >= 0; i--) {
                printf("%c ", *(s+i));
                if (i % 2 == 0) {
                        *(f+j) = *(s+i);
                        j++;
                }
        }
        printf("\nSirul ce contine elementele de pe pozitiile pare este: "); //prima pozitie este 0

        for (int i = 0; i <= j - 1; i++) {
                printf("%c ", *(f+i));
        }
}
//2. Se consideră doi parametri întregi şi alţi doi flotanţi din linia de comandă. Să se
//afişeze suma şi produsul lor.
//3. Scrieţi o aplicaţie care citeşte de la tastatură un şir de caractere cu lungimea mai mare
decât 7. Folosiţi un pointer pt. a accesa şi afişa caracterele de pe poziţiile 1, 3, 5 şi 7.
//Ferentiu Emma-Luciana
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <iostream>
#define DIM 50

void main() {
        char sir[50], * s;
        s = sir;
        printf("Introduceti sirul de caractere:");
        scanf("%s", s);
        if (strlen(s) < 7) {
                printf("Sirul e prea scurt");
        }
        else printf("Caracterele sunt: %c, %c, %c, %c", *(s + 0), *(s + 2), *(s + 4), *(s + 6));
}
//4. Citiţi de la tastatură elementele a 2 matrici de valori întregi. Scrieţi o funcţie care
//primeşte ca parametri pointerii la cele 2 matrici şi returnează un pointer la matricea
//sumă. Rezultatul însumării matricelor va fi afişat în funcţia main. Afişaţi elementele
//de pe diagoanala secundară a matricii sumă, folosind acelaşi pointer.
//Ferentiu Emma-Luciana

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <iostream>
#define DIM 50
void citire(int*, int, int);
int* suma(int*, int*, int*, int, int);
void afis(int*, int, int);

void main() {
        int matrice1[DIM][DIM], matrice2[DIM][DIM], sum[DIM][DIM], * m1, * m2, * s, l1, l2, c1, c2;
        m1 = &matrice1[0][0];
        m2 = &matrice2[0][0];
        s = &sum[0][0];
        printf("Veti introduce numarul de linii si coloane pentru fiecare matrice");
        scanf("%d", &l1);
        scanf("%d", &c1);
        scanf("%d", &l2);
        scanf("%d", &c2);
        citire(m1, l1, c1);
        citire(m2, l2, c2);
        if ((l1 == l2) && (c1 == c2)) {
                s = suma(m1, m2, s, l1, c1);
                printf("Suma este: \n");
                afis(s, l1, c1);
                if (l1 == c1) {
                        printf("Elementele diagonalei secundare: ");
                        for (int i = 0; i < l1; i++) {
                                printf("%d ", *(s + i * l1 + (l1 - i - 1)));
                        }
                }
        }
}

void citire(int* x, int m, int n) {
        int i, j;
        for (i = 0; i < m; i++) {
                for (j = 0; j < n; j++) {
                        printf("\n x[%d][%d]=", i, j);
                        scanf("%d", (x + i * n + j));
                }
        }
}

int* suma(int* x, int* y, int* s, int m, int n) {
        int i, j;
        for (i = 0; i < m; i++) {
                for (j = 0; j < n; j++) {
                        *(s + i * n + j) = *(x + i * n + j) + *(y + i * n + j);
                }
        }
                return s;
}

void afis(int* x, int m, int n) {
        int i, j;
        for (i = 0; i < m; i++) {
                for (j = 0; j < n; j++) {
                        printf(" %d", *(x + i * n + j));
                }
                printf("\n");
        }
}
//5. Definiţi un tablou de pointeri către şiruri de caractere. Fiecare locaţie a tabloului
//conţine adrese către unul din urmatoarele şiruri de caractere:
//- "valoare prea mică"
//- "valoare prea mare"
//- "valoare corectă"
//Aplicaţia generează un număr aleator între 1 şi 100 şi apoi citeşte în mod repetat
//intrarea de la tastatură până când utilizatorul introduce valoarea corectă. Folosiţi 
//L10 – pointeri2 9
//mesajele definite pentru a informa utilizatorul, la fiecare pas, despre relaţia existentă
//între numărul generat şi ultima valoare citită.


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>

void main() {
    const char* c[100] = { "valoare prea mica", "valoare prea mare", "valoare corecta" };
    int r, n;

    srand((unsigned)time(NULL));
    r = rand() % 100;

    do {
        printf("Introduceti un numar intre 1 si 100:");
        scanf("%d", &n);
        if (n < r) {
            printf(" %s", *(c + 0));
        }
        else
            if (n > r) {
                printf(" %s", *(c + 1));
            }
            else printf(" %s", *(c + 2));
    } while (n != r);

    
}
//6. Scrieţi un program în care să definiţi un tablou de pointeri spre şiruri de caractere, pe
//care să-l iniţializaţi cu diferite mesaje. Afişaţi mesajele.

//Ferentiu Emma-Luciana

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>

void main() {
        const char* c[100] = { "plec", "in", "vacanta", "maine" };
        printf("%s %s %s %s", *(c + 0), *(c + 1), *(c + 2), *(c + 3));
}
//9. Scrieţi un program care citeşte de la tastatură elementele de tip float ale unui tablou
//unidimensional, elemente ce reprezintă mediile unei grupe de studenţi. Să se scrie o
//funcţie care determină numărul studenţilor cu media >= 8. Afişaţi rezultatul în main.
//(lucrati cu pointeri, fără variabile globale).

//Ferentiu Emma-Luciana

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>
int functie(float*, int);
void main() {
        float medii[40], * m;
        m = &medii[0];
        int n;
        printf("Introduceti numarul de studenti: ");
        scanf("%d", &n);
        for (int i = 0; i < n; i++) {
                printf("Media este:");
                scanf("%f", m + i);
        }
        int f;
        f = functie(m, n);
        if (f== 0) {
                printf("Nu sunt studenti cu media peste 8");
        }
        else printf("Sunt %d studenti cu  media peste 8", f);
}

int functie(float* m, int n) {
        int i, c = 0;
        for (i = 0; i < n; i++) {
                if (*(m + i) >= 8)
                        c++;
        }
        return c;
}
//10. Scrieţi un program C/C++ în care se citesc de la tastatură elementele de tip întreg ale
//unui tablou unidimensional a, utilizând o funcţie. Scrieţi o funcţie care completează
//un alt tablou unidimensional b, fiecare element al acestuia fiind obţinut prin scăderea
//mediei aritmetice a elementelor din a din elementul corespunzător din a. Scrieţi o
//funcţie care permite afişarea unui tablou unidimensional şi afişaţi tablourile
//unidimensionale a şi b. (utilizând pointeri, fără variabile globale).


//Ferentiu Emma-Luciana

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define DIM 100

void citire(int*, int);
float medie(int*, int);
void construct(int*, float*, int, float);
void afisare1(int*, int);
void afisare2(float*, int);

int  main() {
        int tablou1[DIM], * a, n;
        float m, tablou2[DIM], * b;
        a = &tablou1[0];
        b = &tablou2[0];

        printf("Introduceti marimea tabloului: ");
        scanf("%d", &n);

        printf("Dati elementele tabloului a: ");
        citire(a, n);

        m = medie(a, n);
        construct(a, b, n, m);

        printf("Elementele tabloului a: ");
        afisare1(a, n);

        printf("Elementele tabloului b: ");
        afisare2(b, n);
        return 0;

}

void citire(int* a, int n) {
        int i;
        for (i = 0; i < n; i++) {
                scanf("%d", a + i);
        }
}

float medie(int* a, int n) {
        int s = 0;
        for (int i = 0; i < n; i++) {
                s = s + *(a + i);
        }
        float m = (float)s / n;
        return m;
}

void construct(int* a, float* b, int n, float m) {
        for (int i = 0; i < n; i++) {
                *(b + i) = (*(a + i) - m);
        }
}

void afisare1(int* a, int n) {
        for (int i = 0; i < n; i++) {
                printf("%d ", *(a + i));
        }
}
void afisare2(float* a, int n) {
        for (int i = 0; i < n; i++) {
                printf("%.2f ", *(a + i));
        }
}

//12. Scrieţi un program în care se citesc de la tastatură elementele de tip întreg ale unei
//matrici pătratice, utilizând o funcţie. Scrieţi o funcţie care interschimbă două linii ale
//matricii. Afişaţi cu o funcţie matricea iniţială şi cea obţinută. Dimensiunea matricii şi
//numerele ce identifică liniile care vor fi interschimbate se citesc de la tastatură, în
//funcţia main. (fără variabile globale).
//Ferentiu Emma-Luciana
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define DIM 100

void citire(int*, int);
void functie(int*, int, int, int);
void afisare(int*, int);

int  main() {

        int matrice[DIM][DIM], * m, n;
        m = &matrice[0][0];
        int l1, l2;

        printf("Introduceti marimea matricei patratice: ");
        scanf("%d", &n);

        printf("Dati elementele matricei m: ");
        citire(m, n);

        printf("Spuneti liniile pe care doriti sa le interschimbati: ");
        scanf("%d", &l1);
        scanf("%d", &l2);

        printf("Matricea initiala este: ");
        afisare(m, n);

        functie(m, n, l1, l2);
        
        printf("Matricea obtinuta este: ");
        afisare(m, n);
        return 0;
}

void citire(int* m, int n) {
        int i;
        for (i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                        scanf("%d", m + i * n + j);
                }
        }
}

void functie(int* m, int n, int l1, int l2) {
        int aux;
        for (int i = 0; i < n-1; i++) {
                for (int j = 0; j < n-i-1; j++) {
                        aux = *(m + l1 * n + j);
                        *(m + l1 * n + j) = *(m + l2 * n + j);
                        *(m + l2 * n + j) = aux;
                }
        }
}

void afisare(int* m, int n){
        for (int i = 0; i < n; i++)
        {
                for (int j = 0; j < n; j++)
                {
                        printf("%d ", *(m + i * n + j));

                }
                printf("\n");
        }
}

