
....................................................................................................................
//Construiţi o funcţie recursivă care calculeaza combinari, atat recursiv cat si fol factorial
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
using namespace std;


#include <iostream>
using namespace std;
int combinari(int n, int k);
long long int factorial(int n);

int main()
{
    int n, k;
    cout << "Introduceti n ";
    cin >> n;
    cout << "introduceti k astfel incat n>k";
    cin >> k;
    cout << "\n combinari de n luate cate k sunt " << combinari(n, k);
    long long int a = factorial(k) * factorial(n - k);
    long long int b = factorial(n);
    cout << "\n verificare\n combinari de n luate cate k sunt(daca n<21)" << b / a;
   

}
int combinari(int n, int k)
{
    if (0 == k)
        return 1;
    if (0 == n)
        return 1;
    if (n == k)
        return 1;
    return combinari(n - 1, k) + combinari(n - 1, k - 1);
}
long long int factorial(int n) {
    if (n == 0) return 1;
    else
        return n * factorial(n - 1);
}
................................................................................................
/Construiţi o functie recursiva ce calculeaza cmmdc
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
using namespace std;


#include <iostream>
using namespace std;
int cmmdc(int a, int b);

int main()
{
    int n, k;
    cout << "Introduceti doua numere ";
    cin >> n;
    cin >> k;
    cout << "\n cmmdc acestor numere este:" << cmmdc(n, k);

}
int cmmdc(int a, int b)
{
    if (a == b)
        return a;
    if (a > b)
        return cmmdc(a - b, b);
    if(a<b)
        return cmmdc(a, b - a);
}
....................................................................................................
//Construiţi o functie recursiva ce calculeaza produsul scalar a 2 vectori
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
using namespace std;


#include <iostream>
using namespace std;

int prod(int* v1, int* v2, int n);
void citire(int* v, int n);

int main()
{
    int n, k, v1[100], v2[100];
    cout << "Introduceti numarul de numere din  vectori ";
    cin >> n;
    cout << "Introduceti numerele din primul vector";
    citire(v1, n);
    cout << "Introduceti numerele din al doilea vector";
    citire(v2, n);
    cout << "\nprodusul scalar este " << prod(v1, v2,n);

}
void citire(int* v, int n)
{
    int i;
    for (i = 0; i < n; i++)
        cin >> v[i];
}
int prod(int* v1, int* v2, int n)
{
    if (n == 0)
        return 0;
    else
        return v1[n - 1] * v2[n - 1] + prod(v1, v2, n - 1);
}
..................................................................................
//Să se calculeze suma numerelor impare dintr-un tablou unidimensional de numere întregi în
//mod recursiv, tablou citit dintr - un fişier unde, ca primă valoare, avem numărul de elemente ale
//tabloului.
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
#include <stdlib.h>
using namespace std;


#include <iostream>
using namespace std;

double suma(int* v, int n);
int main()
{

    FILE* fisintrare, * fisiesire;
    int a, v[100];
    int d;
    int i = 0;
    int n;
    if ((a = fopen_s(&fisintrare, "file.txt", "r") != 0)) {
        printf("Eroare la deschiderea fisierul de intrare !");

    }
    fscanf(fisintrare, "%d", &d);
    n = d;
    while (fscanf(fisintrare, "%d", &d) != EOF) {
        v[i] = d;
        i++;
       
    }

    fclose(fisintrare);
    cout << "suma este" << suma(v, n);

}
double suma(int* v, int n)
{
    if (0 == n)
        return 0;
    else
        if (v[n - 1] % 2 == 1)
            return v[n - 1] + suma(v, n - 1);
        else
            return suma(v, n - 1);

}
.........................................................................
//Analog cu problema precedentă, dar se calculează produsul elementelor aflate pe poziţii
//impare într - un tablou unidimensional, respectiv să se calculeze suma numerelor prime din
//tablou.
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
#include <stdlib.h>
using namespace std;


#include <iostream>
using namespace std;

double suma(int* v, int n);
double prod(int* v, int n);
int Prim(int n);
int main()
{

    FILE* fisintrare, * fisiesire;
    int a, v[100];
    int d;
    int i = 0;
    int n;
    if ((a = fopen_s(&fisintrare, "file.txt", "r") != 0)) {
        printf("Eroare la deschiderea fisierul de intrare !");

    }
    fscanf(fisintrare, "%d", &d);
    n = d;
    while (fscanf(fisintrare, "%d", &d) != EOF) {
        v[i] = d;
        i++;
       
    }

    fclose(fisintrare);
    cout << "produsul numerelor aflate pe pozitii impare" << prod(v, n);
    cout << "\nsuma numerelor prime" << suma(v, n);

}
double prod(int* v, int n)
{
    if (0 == n)
        return 1;
    else
        if ((n-1) % 2 == 1)
            return v[n - 1] *prod(v, n - 1);
        else
            return prod(v, n - 1);

}
double suma(int* v, int n)
{
   
    if (0 == n)
        return 0;
     if (Prim(v[n-1]) == 1)
         return  suma(v, n - 1 ) + v[n-1];
  
    return suma(v, n - 1);

}

int Prim(int n)
{
    int i;
    if (n == 1 || n == 0) return 0;
    if (n > 2 && n % 2 == 0) return 0;
    if (n == 3) return 1;
    for (i = 3; i * i < n; i = i + 2)
        if (n % i == 0)
            return 0;
    return 1;
}
..............................................................................
//6.Construiţi o functie recursiva ce calculeaza produsul scalar a 2 vectori
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
using namespace std;


#include <iostream>
using namespace std;

int prod(int* v1, int* v2, int n);
void citire(int* v, int n);

int main()
{
    int n, k, v1[100], v2[100];
    cout << "Introduceti numarul de numere din  vectori ";
    cin >> n;
    cout << "Introduceti numerele din primul vector";
    citire(v1, n);
    cout << "Introduceti numerele din al doilea vector";
    citire(v2, n);
    cout << "\nprodusul scalar este " << prod(v1, v2,n);

}
void citire(int* v, int n)
{
    int i;
    for (i = 0; i < n; i++)
        cin >> v[i];
}
int prod(int* v1, int* v2, int n)
{
    if (n == 0)
        return 0;
    else
        return v1[n - 1] * v2[n - 1] + prod(v1, v2, n - 1);
}
..............................................................................................
//Să se calculeze suma numerelor impare dintr-un tablou unidimensional de numere întregi în
//mod recursiv, tablou citit dintr - un fişier unde, ca primă valoare, avem numărul de elemente ale
//tabloului.
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
#include <stdlib.h>
using namespace std;


#include <iostream>
using namespace std;

double suma(int* v, int n);
int main()
{

    FILE* fisintrare, * fisiesire;
    int a, v[100];
    int d;
    int i = 0;
    int n;
    if ((a = fopen_s(&fisintrare, "file.txt", "r") != 0)) {
        printf("Eroare la deschiderea fisierul de intrare !");

    }
    fscanf(fisintrare, "%d", &d);
    n = d;
    while (fscanf(fisintrare, "%d", &d) != EOF) {
        v[i] = d;
        i++;
       
    }

    fclose(fisintrare);
    cout << "suma este" << suma(v, n);

}
double suma(int* v, int n)
{
    if (0 == n)
        return 0;
    else
        if (v[n - 1] % 2 == 1)
            return v[n - 1] + suma(v, n - 1);
        else
            return suma(v, n - 1);

}
...................................................................................
//Analog cu problema precedentă, dar se calculează produsul elementelor aflate pe poziţii
//impare într - un tablou unidimensional, respectiv să se calculeze suma numerelor prime din
//tablou.
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
#include <stdlib.h>
using namespace std;


#include <iostream>
using namespace std;

double suma(int* v, int n);
double prod(int* v, int n);
int Prim(int n);
int main()
{

    FILE* fisintrare, * fisiesire;
    int a, v[100];
    int d;
    int i = 0;
    int n;
    if ((a = fopen_s(&fisintrare, "file.txt", "r") != 0)) {
        printf("Eroare la deschiderea fisierul de intrare !");

    }
    fscanf(fisintrare, "%d", &d);
    n = d;
    while (fscanf(fisintrare, "%d", &d) != EOF) {
        v[i] = d;
        i++;
       
    }

    fclose(fisintrare);
    cout << "produsul numerelor aflate pe pozitii impare" << prod(v, n);
    cout << "\nsuma numerelor prime" << suma(v, n);

}
double prod(int* v, int n)
{
    if (0 == n)
        return 1;
    else
        if ((n-1) % 2 == 1)
            return v[n - 1] *prod(v, n - 1);
        else
            return prod(v, n - 1);

}
double suma(int* v, int n)
{
   
    if (0 == n)
        return 0;
     if (Prim(v[n-1]) == 1)
         return  suma(v, n - 1 ) + v[n-1];
  
    return suma(v, n - 1);

}

int Prim(int n)
{
    int i;
    if (n == 1 || n == 0) return 0;
    if (n > 2 && n % 2 == 0) return 0;
    if (n == 3) return 1;
    for (i = 3; i * i < n; i = i + 2)
        if (n % i == 0)
            return 0;
    return 1;
}
.......................................................................
//Construiţi o functie recursiva ce calculeaza media unor numere citite cu confirmare
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
using namespace std;


#include <iostream>
using namespace std;

double media();
int main()
{

    cout << media();
  

}
double media()
{
    static int n = 0;
     int a;
     char b;
     cout << "mai doriti sa introduceti o valoare? D/N";
       cin >> b;
     if (b == 'D')
     {
         cin >> a;
         n++;
         return media() + (double)a / n;
     }
     else
         return 0;
   

}
..........................................................................
//Construiţi o functie recursiva si una nerecursiva ce calculeaza nr de aparitii a unei valori intr-un tablou unidimensional
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
using namespace std;


#include <iostream>
using namespace std;

int aparitiirecursiv(int* v1, int n, int a);
void citire(int* v, int n);
int aparitiinerecursiv(int* v1, int n, int a);
int main()
{
    int a, v1[30], n;
    cout << "Introduceti numarul de numere din  vector ";
    cin >> n;
    cout << "Introduceti numerele din vector";
    citire(v1, n);
    cout << "Introduceti o valoare";
    cin >> a;
    cout << "\nnr de aparitii a valorii introduse este" << aparitiirecursiv(v1, n,a);
    cout << "\nverificare\nnr de aparitii a valorii introduse este" << aparitiinerecursiv(v1, n, a);

}
void citire(int* v, int n)
{
    int i;
    for (i = 0; i < n; i++)
        cin >> v[i];
}
int aparitiirecursiv(int* v1, int n, int a)
{
    if (n == 0)
        return 0;
    else
        if (v1[n - 1] == a)
            return  1 + aparitiirecursiv(v1, n - 1, a);
        else
            return aparitiirecursiv(v1, n - 1,a);
}
int aparitiinerecursiv(int* v1, int n, int a)
{
    int i, s = 0;
    for (i = 0; i < n; i++)
        if (v1[i] == a)
            s++;
    return s;
}
....................................................................................................
//Construiţi o functie recursiva si una nerecursiva ce calculeaza nr de aparitii a unei valori intr-un tablou unidimensional
//FERENTIU EMMA LUCIANA 2115
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include <math.h>
#include <iostream>
using namespace std;


#include <iostream>
using namespace std;

int aparitiirecursiv(int* v1, int n, int a);
void citire(int* v, int n);
int aparitiinerecursiv(int* v1, int n, int a);
int main()
{
    int a, v1[30], n;
    cout << "Introduceti numarul de numere din  vector ";
    cin >> n;
    cout << "Introduceti numerele din vector";
    citire(v1, n);
    cout << "Introduceti o valoare";
    cin >> a;
    cout << "\nnr de aparitii a valorii introduse este" << aparitiirecursiv(v1, n,a);
    cout << "\nverificare\nnr de aparitii a valorii introduse este" << aparitiinerecursiv(v1, n, a);

}
void citire(int* v, int n)
{
    int i;
    for (i = 0; i < n; i++)
        cin >> v[i];
}
int aparitiirecursiv(int* v1, int n, int a)
{
    if (n == 0)
        return 0;
    else
        if (v1[n - 1] == a)
            return  1 + aparitiirecursiv(v1, n - 1, a);
        else
            return aparitiirecursiv(v1, n - 1,a);
}
int aparitiinerecursiv(int* v1, int n, int a)
{
    int i, s = 0;
    for (i = 0; i < n; i++)
        if (v1[i] == a)
            s++;
    return s;
}
